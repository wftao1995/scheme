#lang racket/load
(load "E:\\mysimply.rkt")

(define (isnumber? a)
  (if (member? (first a) "1234567890")
      (if (equal? (bf a) "")
          #t
          (isnumber? (bf a)))
      #f))

(define (sentence-of-words? a)
  (cond ((equal? a '()) #t)
        ((equal? a "") #f)
        (else (sentence-of-words? (bf a)))))
 
(define (type-of a);;What if subsentence?
  (cond ((or (equal? #t a)
             (equal? #f a)) 'boolean)
        ((equal? a '()) '(empty sentence))
        ((equal? a "") '(empty word))
        ((sentence-of-words? a) 'sentence)
        ((isnumber? a) 
         (cond ((> a 0) '(positive number))
               ((= a 0) 'zero)
               (else '(negative number))))  
        (else 'word)))

(define (sort2 a)
  (if (> (first a) (last a))
      (se (last a) (first a))
      a))

(define (valid-date? month day year)
  (cond ((< year 0) #f)
        ((< month 1) #f)
        ((< day 1) #f)
        ((> month 12) #f)
        ((> day 31) #f)
        ((member? month '(4 6 9 11)) (if (> day 30)
                                         #f
                                         #t))
        ((= month 2) (cond ((> day 29) #f)
                           ((= day 29) (cond ((= 0 (remainder year 400)) #t)
                                             ((= 0 (remainder year 100)) #f)
                                             ((= 0 (remainder year 4)) #t)
                                             (else #f)))
                           (else #t)))
        (else #t)))

(define (roots a b c)
  (let ((discriminant (sqrt (- (* b b) (* 4  C)))))
    (se (/ (+ (- b) discriminant) (* 2 a))
        (/ (- (- b) discriminant) (* 2 a)))))
    
(define (plural num a)
  (let ((n (cond ((equal? num 0) 'zero)
                ((equal? num 1) 'one)
                ((equal? num 2) 'two)
                ((equal? num 3) 'three)
                ((equal? num 4) 'four)
                ((equal? num 5) 'five)
                ((equal? num 6) 'six)
                ((equal? num 7) 'seven)
                ((equal? num 8) 'eight)
                ((equal? num 9) 'nine)
                (else (whoops "Invalid argument to PLUAR: " num)))))
   (if (= num 1)
       (se n a)
       (cond ((member? (last a) 'o) (if (member? a '(potato tomato))
                                        (se n (word a 's))
                                        (se n (word a 'es))))
             ((equal? (last a) 'x) (se n (word a 'es)))
             ((equal? (last a) 'y) (if (member? (last (bl a)) 'aeiou) 
                                       (se n (word a 's))
                                       (se n (word a 'es))))
             ((member? (word (last (bl a)) (last a)) '(sh ch)) (se n (word a 'es)))
             (esle (se n (word a 'ss)))))))

(define (describe-time a)
  (let ((msecond 60) (minute 3600) (hour 86400) (day 604800) 
                    (week 3024000) (month 7776000) (season 31104000) (year 3110400000));crntury:else
  (cond ((< a 0) (whoops "Invalid argument to DISCRIBE-TIME: " a))
        ((< a msecond) (se a 'second))
        ((< a minute) (se (/ a msecond) 'minute))
        ((< a hour) (se (/ a minute) 'hour))
        ((< a day) (se (/ a hour) 'day))
        ((< a week) (se (/ a day) 'week))
        ((< a month) (se (/ a day-month) 'month))
        ((< a season) (se (/ a month) 'season))
        ((< a year) (se (/ a season) 'year))
        (else (se (/ a year) 'century)))))
